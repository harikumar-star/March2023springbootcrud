SPRING BOOT IMPORTANT LINKS:
===========================


Spring @RequestParam vs @PathVariable Annotations
https://www.codejava.net/frameworks/spring/spring-mvc-with-jdbctemplate-example
@RequestParam is more useful on a traditional web application where data is mostly passed in the query parameters while @PathVariable is more suitable for RESTful web services where URL contains values.
 
REQUESTBODY VS REQUESTBODY:
Request body for sending value from postman json format to print that values in console use restcontroller annotation
Requestbody 
uses HTTP message converter to convert a User object to HTTP response body with the help of jackson-databind

https://www.springboottutorial.com/spring-boot-with-static-content-css-and-javascript-js

=========================
select * from spring

alter table spring
rename column empname to productname;

alter table spring
add(email varchar2(50),
telephone varchar2(50),
address varchar2(50));

delete from spring

desc spring

http://127.0.0.1:8081/apex/f?p=4500:1003:2716479632654717::NO:::

https://stackoverflow.com/questions/19972073/how-to-show-success-message-on-page-redirect-from-servlet-to-jsp

httsession
https://studygyaan.com/spring-boot/httpsession-spring-boot-session-management#:~:text=Session%20management%20is%20an%20essential,Servlet%20API%20to%20manage%20sessions.


https://spring.io/guides/gs/serving-web-content/

https://github.com/harikumar-star/March2023springbootcrud.git
https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/How-to-push-an-existing-project-to-GitHub -- git basic command


autoincrement:
https://stackoverflow.com/questions/11296361/how-to-create-id-with-auto-increment-on-oracle

https://www.bezkoder.com/spring-boot-jdbctemplate-example-mysql/

https://www.tutorialspoint.com/spring_boot/spring_boot_sending_email.htm 

https://stackoverflow.com/questions/49588657/how-create-an-input-list-html5-with-all-cities-of-country-is-possible

https://projectlombok.org/features/Data


==========================

download CSV Files code:
======================

public void downloadCSV(HttpServletResponse response) throws IOException {

		String csvFileName = "books.csv";

		response.setContentType("text/csv");

		// creates mock data
		String headerKey = "Content-Disposition";
		String headerValue = String.format("attachment; filename=\"%s\"", csvFileName);
		response.setHeader(headerKey, headerValue);

		Employee book1 = new Employee();
		book1.setName("hari");
		book1.setDesignation("it");
		book1.setExperience("23");
		book1.setAge("32");
		book1.setStatus("dd");

		book1.getName();
		book1.getDesignation();
		book1.getExperience();
		book1.getAge();
		book1.getStatus();

		List<Employee> listBooks = Arrays.asList(book1);

		// uses the Super CSV API to generate CSV data from the model data
		CsvBeanWriter csvWriter = new CsvBeanWriter(response.getWriter(), CsvPreference.STANDARD_PREFERENCE);

		String[] header = { "Name", "Designation", "Experience", "Age", "Status" };

		csvWriter.writeHeader(header);

		for (Employee aBook : listBooks) {
			csvWriter.write(aBook, header);
		}

		csvWriter.close();
	}
}
maven
====

<dependency>
    <groupId>net.sf.supercsv</groupId>
    <artifactId>super-csv</artifactId>
    <version>2.4.0</version>
</dependency>


	<dependency>
   <groupId>com.opencsv</groupId>
   <artifactId>opencsv</artifactId>
   <version>4.4</version>
</dependency>
<dependency>
   <groupId>org.apache.commons</groupId>
   <artifactId>commons-lang3</artifactId>
   <version>3.9</version>
</dependency>

https://www.tutorialspoint.com/how-to-write-data-to-csv-file-in-java

https://www.tutorialspoint.com/writing-data-from-database-to-csv-file


https://www.java67.com/2015/08/how-to-load-data-from-csv-file-in-java.html


